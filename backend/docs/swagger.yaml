basePath: /
definitions:
  handlers.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
      repeat_new_password:
        type: string
      username:
        type: string
    required:
    - new_password
    - old_password
    - repeat_new_password
    - username
    type: object
  handlers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  handlers.LoginResponse:
    properties:
      require_password_change:
        type: boolean
      status:
        type: string
      token:
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      password2:
        description: |-
          Password2 is used to confirm the password, it is optional, so it is omitted if it is not provided or an empty string
          If it is provided, it must be equal to the Password field
        type: string
      username:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  handlers.SearchResponse:
    properties:
      data:
        items:
          additionalProperties: true
          type: object
        type: array
    type: object
  handlers.WeatherResponse:
    properties:
      data:
        additionalProperties: true
        type: object
    type: object
info:
  contact: {}
  description: This is the API for the WhoKnows application
  title: WhoKnows API
  version: "1.0"
paths:
  /api/change-password:
    post:
      consumes:
      - application/json
      description: Endpoint to change the password of a user
      parameters:
      - description: Change password payload
        in: body
        name: changePasswordRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to change password
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Change user password
      tags:
      - Authentication
  /api/logout:
    get:
      description: Logs out the user by revoking the jwt token
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
        "401":
          description: Invalid Authorization header format
          schema:
            type: string
        "500":
          description: Failed to revoke token
          schema:
            type: string
      security:
      - Bearer: []
      tags:
      - Authentication
  /api/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User data
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            type: string
        "500":
          description: Failed to create user
          schema:
            type: string
      tags:
      - Authentication
  /api/search:
    get:
      description: Search for pages by content
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Language filter
        in: query
        name: language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SearchResponse'
        "400":
          description: Search query (q) is required
          schema:
            type: string
        "500":
          description: Search query failed
          schema:
            type: string
  /api/validate-login:
    get:
      description: Validates the jwt token
      responses:
        "200":
          description: valid
          schema:
            type: string
        "401":
          description: Token expired/revoked
          schema:
            type: string
      security:
      - Bearer: []
      tags:
      - Authentication
  /api/weather:
    get:
      description: Get weather information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WeatherResponse'
        "500":
          description: Failed to fetch weather data
          schema:
            type: string
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return a JWT token for further requests.
      parameters:
      - description: Login request body
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid username or password
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login a user
      tags:
      - Authentication
securityDefinitions:
  Bearer:
    in: header
    name: JWT
    type: apiKey
swagger: "2.0"
