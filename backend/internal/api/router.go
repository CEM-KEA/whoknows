package api

import (
	"net/http"

	_ "github.com/CEM-KEA/whoknows/backend/docs" // docs is generated by Swag CLI
	"github.com/CEM-KEA/whoknows/backend/internal/api/handlers"
	"github.com/CEM-KEA/whoknows/backend/internal/api/middlewares"
	"github.com/CEM-KEA/whoknows/backend/internal/config"
	"github.com/CEM-KEA/whoknows/backend/internal/utils"
	"github.com/gorilla/mux"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/rs/cors"
	httpSwagger "github.com/swaggo/http-swagger"
)

// NewRouter initializes and returns a new HTTP router with all the necessary routes and middlewares configured.
// It sets up static file routes, redirects, Swagger documentation, and API routes.
// Additionally, it applies CORS and other middlewares such as metrics and no-cache.
// Returns an http.Handler that can be used to handle HTTP requests.
func NewRouter() http.Handler {
	utils.LogInfo("Initializing router", nil)

	router := mux.NewRouter()
	setupStaticFileRoutes(router)
	setupRedirects(router)
	setupSwaggerDocs(router)
	setupAPIRoutes(router)

	// Apply CORS and other middlewares
	corsHandler := setupCORS()
	utils.LogInfo("Middlewares applied successfully", nil)
	return middlewares.MetricsMiddleware(middlewares.NoCacheMiddleware(corsHandler(router)))
}


// setupStaticFileRoutes configures the routes for serving static files.
// It sets up handlers for serving the robots.txt and sitemap.xml files.
//
// Parameters:
//   - router: a pointer to the mux.Router where the routes will be configured.
func setupStaticFileRoutes(router *mux.Router) {
	utils.LogInfo("Configuring static file routes", nil)
	router.HandleFunc("/api/robots.txt", serveStaticFile("./static/robots.txt", "text/plain"))
	router.HandleFunc("/api/sitemap.xml", serveStaticFile("./static/sitemap.xml", "application/xml"))
}


// serveStaticFile returns an HTTP handler function that serves a static file.
// The handler sets the Content-Type header to the provided contentType and
// serves the file located at filePath.
//
// Parameters:
//   - filePath: The path to the static file to be served.
//   - contentType: The MIME type to be set in the Content-Type header.
//
// Returns:
//   An HTTP handler function that serves the specified static file.
func serveStaticFile(filePath string, contentType string) func(http.ResponseWriter, *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		utils.LogInfo("Serving static file", map[string]interface{}{
			"file": filePath,
		})
		w.Header().Set("Content-Type", contentType)
		http.ServeFile(w, r, filePath)
	}
}

// setupRedirects configures the given router with various redirect routes.
// It sets up redirects for the root path, /api, /api/, /api/swagger, /robots.txt, and /sitemap.xml.
// The redirects for /robots.txt and /sitemap.xml are permanent (HTTP 301).
//
// Parameters:
//   - router: The mux.Router instance to configure with redirects.
func setupRedirects(router *mux.Router) {
	utils.LogInfo("Configuring redirects", nil)
	redirectHandler := RedirectToSwaggerHandler()
	router.Handle("/", redirectHandler)
	router.Handle("/api", redirectHandler)
	router.Handle("/api/", redirectHandler)
	router.Handle("/api/swagger", redirectHandler)
	router.Handle("/robots.txt", http.RedirectHandler("/api/robots.txt", http.StatusMovedPermanently))
	router.Handle("/sitemap.xml", http.RedirectHandler("/api/sitemap.xml", http.StatusMovedPermanently))
}


// setupSwaggerDocs configures the Swagger documentation route for the provided router.
// It logs the setup process and sets up the route to serve Swagger UI.
//
// Parameters:
//   - router (*mux.Router): The router to which the Swagger documentation route will be added.
func setupSwaggerDocs(router *mux.Router) {
	utils.LogInfo("Setting up Swagger documentation route", nil)
	router.PathPrefix("/api/swagger/").Handler(httpSwagger.WrapHandler)
}


// setupAPIRoutes configures the API routes for the application.
// It sets up the following routes:
// - GET /api/search: handled by handlers.Search
// - GET /api/weather: handled by handlers.WeatherHandler
// - POST /api/register: handled by handlers.RegisterHandler
// - POST /api/login: handled by handlers.Login
// - GET /api/logout: handled by handlers.LogoutHandler
// - GET /api/validate-login: handled by handlers.ValidateLoginHandler
// - POST /api/change-password: handled by handlers.ChangePasswordHandler
func setupAPIRoutes(router *mux.Router) {
	utils.LogInfo("Configuring API routes", nil)
	router.HandleFunc("/api/search", handlers.Search).Methods("GET")
	router.HandleFunc("/api/weather", handlers.WeatherHandler).Methods("GET")
	router.HandleFunc("/api/register", handlers.RegisterHandler).Methods("POST")
	router.HandleFunc("/api/login", handlers.Login).Methods("POST")
	router.HandleFunc("/api/logout", handlers.LogoutHandler).Methods("GET")
	router.HandleFunc("/api/validate-login", handlers.ValidateLoginHandler).Methods("GET")
	router.HandleFunc("/api/change-password", handlers.ChangePasswordHandler).Methods("POST")
	router.Handle("/api/probe", promhttp.Handler())
}


// setupCORS configures Cross-Origin Resource Sharing (CORS) settings based on the application's environment.
// It returns a middleware handler function that applies the CORS settings to incoming HTTP requests.
//
// The allowed origins are determined by the environment:
// - "development": allows all origins ("*").
// - "test": allows "http://localhost" and "https://localhost".
// - Other environments: allows "http://cemdev.dk" and "https://cemdev.dk".
//
// The CORS settings include:
// - Allowed methods: GET, POST, PUT, DELETE, OPTIONS.
// - Allowed headers: Authorization, Content-Type.
// - Allow credentials: true.
//
// The function also logs the CORS configuration for informational purposes.
func setupCORS() func(http.Handler) http.Handler {
	env := config.AppConfig.Environment.Environment
	var allowedOrigins []string

	switch env {
	case "development":
		allowedOrigins = []string{"*"}
	case "test":
		allowedOrigins = []string{"http://localhost", "https://localhost"}
	default:
		allowedOrigins = []string{"http://cemdev.dk", "https://cemdev.dk"}
	}

	utils.LogInfo("CORS configuration set", map[string]interface{}{
		"environment":    env,
		"allowedOrigins": allowedOrigins,
	})

	return cors.New(cors.Options{
		AllowedOrigins:   allowedOrigins,
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Authorization", "Content-Type"},
		AllowCredentials: true,
	}).Handler
}

// RedirectToSwaggerHandler redirects root requests to Swagger documentation.
func RedirectToSwaggerHandler() http.Handler {
	return http.RedirectHandler("/api/swagger/", http.StatusMovedPermanently)
}