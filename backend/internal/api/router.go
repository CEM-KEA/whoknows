package api

import (
	"net/http"

	_ "github.com/CEM-KEA/whoknows/backend/docs" // docs is generated by Swag CLI
	"github.com/CEM-KEA/whoknows/backend/internal/api/handlers"
	"github.com/CEM-KEA/whoknows/backend/internal/config"
	"github.com/gorilla/mux"
	"github.com/rs/cors"
	httpSwagger "github.com/swaggo/http-swagger"
)

func NewRouter() http.Handler {
	router := mux.NewRouter()

	router.HandleFunc("/api/robots.txt", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Cache-Control", "no-store")
		http.ServeFile(w, r, "./static/robots.txt")
	})

	router.HandleFunc("/api/sitemap.xml", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Cache-Control", "no-store")
		http.ServeFile(w, r, "./static/sitemap.xml")
	})

	// Redirects
	router.Handle("/", RedirectToSwaggerHandler())
	router.Handle("/api", RedirectToSwaggerHandler())
	router.Handle("/api/", RedirectToSwaggerHandler())
	router.Handle("/api/swagger", RedirectToSwaggerHandler())
	router.Handle("/robots.txt", http.RedirectHandler("/api/robots.txt", http.StatusMovedPermanently))
	router.Handle("/sitemap.xml", http.RedirectHandler("/api/sitemap.xml", http.StatusMovedPermanently))
	
	router.PathPrefix("/api/swagger/").Handler(httpSwagger.WrapHandler)

	router.HandleFunc("/api/search", handlers.Search).Methods("GET")
	router.HandleFunc("/api/weather", handlers.WeatherHandler).Methods("GET")
	router.HandleFunc("/api/register", handlers.RegisterHandler).Methods("POST")
	router.HandleFunc("/api/login", handlers.Login).Methods("POST")
	router.HandleFunc("/api/logout", handlers.LogoutHandler).Methods("GET")
	router.HandleFunc("/api/validate-login", handlers.ValidateLoginHandler).Methods("GET")
	router.HandleFunc("/api/change-password", handlers.ChangePasswordHandler).Methods("POST")

	// if environment is not production, allow all origins (*)
	var allowedOrigins []string

	if config.AppConfig.Environment.Environment == "development" {
		allowedOrigins = []string{"*"}
	} else if config.AppConfig.Environment.Environment == "test" {
		allowedOrigins = []string{"http://localhost", "https://localhost"}
	} else {
		allowedOrigins = []string{"http://cemdev.dk", "https://cemdev.dk"}
	}

	c := cors.New(cors.Options{
		AllowedOrigins:   allowedOrigins, // CHANGE THIS - ALLOW ONLY FRONTEND URL
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Authorization", "Content-Type"},
		AllowCredentials: true,
	})

	return c.Handler(router)
}

func RedirectToSwaggerHandler() http.Handler {
	return http.RedirectHandler("/api/swagger/", http.StatusMovedPermanently)
}