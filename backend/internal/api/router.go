package api

import (
	"net/http"

	_ "github.com/CEM-KEA/whoknows/backend/docs" // docs is generated by Swag CLI
	"github.com/CEM-KEA/whoknows/backend/internal/api/handlers"
	"github.com/CEM-KEA/whoknows/backend/internal/api/middlewares"
	"github.com/CEM-KEA/whoknows/backend/internal/config"
	"github.com/CEM-KEA/whoknows/backend/internal/utils"
	"github.com/gorilla/mux"
	"github.com/rs/cors"
	"github.com/sirupsen/logrus"
	httpSwagger "github.com/swaggo/http-swagger"
)

// NewRouter initializes and returns a new HTTP router with predefined routes,
// middlewares, and configurations. It sets up routes for serving static files,
// redirects, Swagger documentation, and API endpoints. Additionally, it applies
// CORS configuration and wraps the router with necessary middlewares for metrics
// and no-cache headers.
func NewRouter() http.Handler {
	utils.LogInfo("Initializing router", nil)

	router := mux.NewRouter()
	// Static file routes
	utils.LogInfo("Setting up static file routes", nil)
	router.HandleFunc("/api/robots.txt", serveStaticFile("./static/robots.txt", "text/plain"))
	router.HandleFunc("/api/sitemap.xml", serveStaticFile("./static/sitemap.xml", "application/xml"))

	// Redirects
	utils.LogInfo("Setting up redirects", nil)
	setupRedirects(router)

	// Swagger documentation
	utils.LogInfo("Setting up Swagger documentation route", nil)
	router.PathPrefix("/api/swagger/").Handler(httpSwagger.WrapHandler)

	// API routes
	utils.LogInfo("Setting up API routes", nil)
	setupAPIRoutes(router)

	// CORS configuration
	corsHandler := setupCORS()

	// Wrap router with middleware
	utils.LogInfo("Applying middlewares", nil)
	return middlewares.MetricsMiddleware(middlewares.NoCacheMiddleware(corsHandler(router)))
}

// serveStaticFile returns an HTTP handler function that serves a static file.
// It sets the Content-Type header to the provided contentType and logs the file path.
//
// Parameters:
//   - filePath: The path to the static file to be served.
//   - contentType: The MIME type to be set in the Content-Type header.
//
// Returns:
//   An HTTP handler function that serves the specified static file.
func serveStaticFile(filePath string, contentType string) func(http.ResponseWriter, *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		utils.LogInfo("Serving static file", logrus.Fields{
			"path": filePath,
		})
		w.Header().Set("Content-Type", contentType)
		http.ServeFile(w, r, filePath)
	}
}


// setupRedirects configures the provided router with various redirect routes.
// It sets up redirects for the root path, API paths, Swagger documentation,
// robots.txt, and sitemap.xml. All redirects point to their respective API endpoints.
//
// Parameters:
//   - router (*mux.Router): The router to configure with redirects.
//
// Example:
//   router := mux.NewRouter()
//   setupRedirects(router)
func setupRedirects(router *mux.Router) {
	redirectHandler := RedirectToSwaggerHandler()
	router.Handle("/", redirectHandler)
	router.Handle("/api", redirectHandler)
	router.Handle("/api/", redirectHandler)
	router.Handle("/api/swagger", redirectHandler)
	router.Handle("/robots.txt", http.RedirectHandler("/api/robots.txt", http.StatusMovedPermanently))
	router.Handle("/sitemap.xml", http.RedirectHandler("/api/sitemap.xml", http.StatusMovedPermanently))
	utils.LogInfo("Redirects configured", nil)
}


// setupAPIRoutes configures the API routes for the application.
// It registers the following routes with their respective handlers:
//  - GET /api/search: handled by handlers.Search
//  - GET /api/weather: handled by handlers.WeatherHandler
//  - POST /api/register: handled by handlers.RegisterHandler
//  - POST /api/login: handled by handlers.Login
//  - GET /api/logout: handled by handlers.LogoutHandler
//  - GET /api/validate-login: handled by handlers.ValidateLoginHandler
//  - POST /api/change-password: handled by handlers.ChangePasswordHandler
// Additionally, it logs a message indicating that the API routes have been configured.
func setupAPIRoutes(router *mux.Router) {
	router.HandleFunc("/api/search", handlers.Search).Methods("GET")
	router.HandleFunc("/api/weather", handlers.WeatherHandler).Methods("GET")
	router.HandleFunc("/api/register", handlers.RegisterHandler).Methods("POST")
	router.HandleFunc("/api/login", handlers.Login).Methods("POST")
	router.HandleFunc("/api/logout", handlers.LogoutHandler).Methods("GET")
	router.HandleFunc("/api/validate-login", handlers.ValidateLoginHandler).Methods("GET")
	router.HandleFunc("/api/change-password", handlers.ChangePasswordHandler).Methods("POST")
	utils.LogInfo("API routes configured", nil)
}

// setupCORS configures Cross-Origin Resource Sharing (CORS) settings based on the application's environment.
// It returns a middleware handler function that applies the CORS settings to incoming HTTP requests.
//
// In "development" environment, all origins are allowed.
// In "test" environment, only "http://localhost" and "https://localhost" are allowed.
// In other environments, only "http://cemdev.dk" and "https://cemdev.dk" are allowed.
//
// The CORS settings include:
// - Allowed methods: GET, POST, PUT, DELETE, OPTIONS
// - Allowed headers: Authorization, Content-Type
// - Allow credentials: true
//
// The function also logs the configured environment and allowed origins.
func setupCORS() func(http.Handler) http.Handler {
	env := config.AppConfig.Environment.Environment
	var allowedOrigins []string

	switch env {
	case "development":
		allowedOrigins = []string{"*"}
	case "test":
		allowedOrigins = []string{"http://localhost", "https://localhost"}
	default:
		allowedOrigins = []string{"http://cemdev.dk", "https://cemdev.dk"}
	}

	utils.LogInfo("Configuring CORS", logrus.Fields{
		"environment": env,
		"allowedOrigins": allowedOrigins,
	})

	return cors.New(cors.Options{
		AllowedOrigins:   allowedOrigins,
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Authorization", "Content-Type"},
		AllowCredentials: true,
	}).Handler
}

// RedirectToSwaggerHandler returns an HTTP handler that redirects requests to the Swagger documentation page.
// It logs an informational message indicating the redirection and then performs a permanent redirect to "/api/swagger/".
func RedirectToSwaggerHandler() http.Handler {
	utils.LogInfo("Redirecting to Swagger documentation", nil)
	return http.RedirectHandler("/api/swagger/", http.StatusMovedPermanently)
}
