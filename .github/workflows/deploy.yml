name: deploy

on:
  push:
    branches:
      - main

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_output.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history and tags

      - name: Verify Git Tags
        run: git tag

      - name: Get Current Tag
        id: get_tag
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "DEBUG: Got version: $VERSION"

      - name: Increment Minor Version Tag
        id: set_output
        run: |
          # Extract the version numbers
          CURRENT_TAG=$VERSION
          MAJOR=$(echo $CURRENT_TAG | cut -d'.' -f1 | sed 's/v//')
          MINOR=$(echo $CURRENT_TAG | cut -d'.' -f2)

          # Increment the minor version and check if the tag exists
          NEW_MINOR=$((MINOR+1))
          NEW_TAG="v$MAJOR.$NEW_MINOR"
          while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
            NEW_MINOR=$((NEW_MINOR+1))
            NEW_TAG="v$MAJOR.$NEW_MINOR"
          done

          # Output the new tag
          echo "New tag will be: $NEW_TAG"
          echo "version=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "DEBUG: New version tag: $NEW_TAG"

  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_build_image_tag.outputs.image_tag }}
    needs: get_version
    env:
      IMAGE_TAG: ${{ needs.get_version.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log into GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set Repository Name to Lowercase
        id: set_repo_name
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "repo_name=$REPO_NAME" >> $GITHUB_ENV

      - name: Build and Push Backend Image
        env:
          repo_name: ${{ env.repo_name }}
        run: |
          docker build -t ghcr.io/${{ env.repo_name }}/backend:${{env.IMAGE_TAG}} -f ./backend/Dockerfile.prod ./backend
          docker push ghcr.io/${{ env.repo_name }}/backend:${{env.IMAGE_TAG}}

      - name: Build and Push Frontend Image
        env:
          repo_name: ${{ env.repo_name }}
        run: |
          docker build -t ghcr.io/${{ env.repo_name }}/frontend:${{env.IMAGE_TAG}} -f ./frontend/Dockerfile.prod ./frontend
          docker push ghcr.io/${{ env.repo_name }}/frontend:${{env.IMAGE_TAG}}

      - name: Set Build Image Tag
        id: set_build_image_tag
        run: |
          echo "image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
          echo "DEBUG: Image tag: ${{ env.IMAGE_TAG }}"

  deploy_and_release:
    runs-on: ubuntu-latest
    needs: build_and_push
    env:
      IMAGE_TAG: ${{ needs.build_and_push.outputs.image_tag }}

    steps:

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to Azure VM
      run: |
        echo "Deploying with IMAGE_TAG: ${{ env.IMAGE_TAG }}"

        # SSH into the Azure VM and deploy
        ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} << EOF
          cd /home/azureuser/whoknows || exit

          # Pull the compose.prod.yml
          git fetch origin main
          git checkout origin/main -- compose.prod.yml

          # Set environment variables directly in OS (no need for .env)
          export API_DATABASE_USER="${{ secrets.API_DATABASE_USER }}"
          export API_DATABASE_PASSWORD="${{ secrets.API_DATABASE_PASSWORD }}"
          export API_DATABASE_NAME="${{ secrets.API_DATABASE_NAME }}"
          export API_DATABASE_SSL_MODE="${{ secrets.API_DATABASE_SSL_MODE }}"
          export API_DATABASE_MIGRATE="${{ secrets.API_DATABASE_MIGRATE }}"
          export API_JWT_SECRET="${{ secrets.API_JWT_SECRET }}"
          export API_JWT_EXPIRATION="${{ secrets.API_JWT_EXPIRATION }}"
          export API_APP_ENVIRONMENT="${{ secrets.API_APP_ENVIRONMENT }}"
          export API_PAGINATION_LIMIT="${{ secrets.API_PAGINATION_LIMIT }}"
          export API_PAGINATION_OFFSET="${{ secrets.API_PAGINATION_OFFSET }}"
          export API_LOG_LEVEL="${{ secrets.API_LOG_LEVEL }}"
          export API_LOG_FORMAT="${{ secrets.API_LOG_FORMAT }}"
          export VITE_API_URL="${{ secrets.VITE_API_URL }}"
          export API_WEATHER_API_KEY="${{ secrets.API_WEATHER_API_KEY }}"
          export IMAGE_TAG="${{ env.IMAGE_TAG }}"

          # Pull the latest images from GHCR
          echo "Pulling backend image ghcr.io/${{ github.repository }}/backend:${{ env.IMAGE_TAG }}"
          docker pull ghcr.io/${{ github.repository }}/backend:${{ env.IMAGE_TAG }}

          echo "Pulling frontend image ghcr.io/${{ github.repository }}/frontend:${{ env.IMAGE_TAG }}"
          docker pull ghcr.io/${{ github.repository }}/frontend:${{ env.IMAGE_TAG }}

          # Start Docker services for production
          echo "Starting Docker services for production..."
          docker compose down
          docker compose -f compose.prod.yml up -d
        EOF

    - name: Checkout Code for Tagging
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create New Tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git tag ${{ env.IMAGE_TAG }}
        git push origin ${{ env.IMAGE_TAG }}

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        gh release create ${{ env.IMAGE_TAG }} \
        --title "Release ${{ env.IMAGE_TAG }}" \
        --notes "Automatically generated release." \
        --generate-notes
