name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_output.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get Current Tag
        id: get_tag
        run: |
          VERSION=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set Output
        id: set_output
        run: echo "version=${{ env.VERSION }}" >> $GITHUB_OUTPUT

  build_and_test:
    runs-on: ubuntu-latest
    needs: get_version
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      IMAGE_TAG: ${{ needs.get_version.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: SonarQube Scan Monorepo
        uses: sonarsource/sonarcloud-github-action@v3
        with:
          args: |
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.token=${{ env.SONAR_TOKEN }}
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
            -Dsonar.sources=./backend,./frontend,./legacy,./compose.yml
            -Dsonar.exclusions=**/node_modules/**,**/test/**,**/legacy/**

      - name: Run Backend Tests
        run: |
          cd backend
          go test ./...

      - name: Build Backend Docker Image
        run: |
          cd backend
          docker build -t whoknows-backend:${{ env.IMAGE_TAG }} .

      - name: Build Frontend Docker Image
        run: |
          cd frontend
          docker build -t whoknows-frontend:${{ env.IMAGE_TAG }} .
      
      - name: Refresh package index
        run: |
          sudo apt-get update
      
      - name: Install Dependencies for Playwright
        run: |
          sudo apt-get update && sudo apt-get install -y \
            libevent-2.1-7 \
            libopus0 \
            libgstallocators-1.0-0 \
            libgstapp-1.0-0 \
            libgstpbutils-1.0-0 \
            libgstaudio-1.0-0 \
            libgstgl-1.0-0 \
            libgsttag-1.0-0 \
            libgstvideo-1.0-0 \
            libgstcodecparsers-1.0-0 \
            libgstfft-1.0-0 \
            libharfbuzz-icu0 \
            libhyphen0 \
            libmanette-0.2-0 \
            libflite1 \
            libflite-usenglish1 \
            libflite-cmu-grapheme-lang1 \
            libflite-cmu-grapheme-lex1 \
            libflite-cmu-indic-lang1 \
            libflite-cmu-indic-lex1 \
            libflite-cmulex1 \
            libflite-cmu-time-awb1 \
            libflite-cmu-us-awb1 \
            libflite-cmu-us-kal16-1 \
            libflite-cmu-us-kal1 \
            libflite-cmu-us-rms1 \
            libflite-cmu-us-slt1 \
            libgles2 \
            libx264-163 \
            libwoff1 \
            libvpx7

      - name: Install Playwright
        run: |
          cd frontend
          npm install @playwright/test
          npx playwright install

      - name: Run End-to-End Tests
        run: |
          cd frontend
          npx playwright test

      - name: Set Output Image Tag
        id: set_image_tag
        run: echo "image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_test
    outputs:
      image_tag: ${{ steps.set_deploy_image_tag.outputs.image_tag }}
    env:
      IMAGE_TAG: ${{ needs.build_and_test.outputs.image_tag }}

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Azure VM
        run: |
          echo "Deploying with IMAGE_TAG: ${{ env.IMAGE_TAG }}"

          # SSH into the Azure VM and deploy
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} << EOF
            cd /home/azureuser/whoknows || exit

            # Generate the .env file
            echo "API_SERVER_PORT=${{ secrets.API_SERVER_PORT }}" > .env
            echo "API_DATABASE_FILE_PATH=./app/internal/database/whoknows.db" >> .env
            echo "API_DATABASE_MIGRATE=${{ secrets.API_DATABASE_MIGRATE }}" >> .env
            echo "API_DATABASE_SEED=${{ secrets.API_DATABASE_SEED }}" >> .env
            echo "API_DATABASE_SEED_FILE_PATH=./app/internal/database/pages.json" >> .env
            echo "API_JWT_SECRET=${{ secrets.API_JWT_SECRET }}" >> .env
            echo "API_JWT_EXPIRATION=${{ secrets.API_JWT_EXPIRATION }}" >> .env
            echo "API_APP_ENVIRONMENT=${{ secrets.API_APP_ENVIRONMENT }}" >> .env
            echo "API_PAGINATION_LIMIT=${{ secrets.API_PAGINATION_LIMIT }}" >> .env
            echo "API_PAGINATION_OFFSET=${{ secrets.API_PAGINATION_OFFSET }}" >> .env
            echo "API_LOG_LEVEL=${{ secrets.API_LOG_LEVEL }}" >> .env
            echo "API_LOG_FORMAT=${{ secrets.API_LOG_FORMAT }}" >> .env
            echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
            echo "API_WEATHER_API_KEY=${{ secrets.API_WEATHER_API_KEY }}" >> .env
            echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> .env

            # Load local Docker images
            echo "Loading Docker images..."
            docker save whoknows-backend:${{ env.IMAGE_TAG }} | docker load
            docker save whoknows-frontend:${{ env.IMAGE_TAG }} | docker load

            # Update Docker images and restart services
            echo "Pulling and starting Docker services..."
            docker compose down
            docker compose up -d
          EOF

      - name: Set Deploy Image Tag
        id: set_deploy_image_tag
        run: echo "image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  create_release:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Create Release with GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating release for tag: ${{ needs.deploy.outputs.image_tag }}"
          gh release create ${{ needs.deploy.outputs.image_tag }} \
          --title "Release ${{ needs.deploy.outputs.image_tag }}" \
          --notes "This is an automatically generated release with all the latest changes." \
          --generate-notes

      - name: Upload Assets to Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Uploading assets to release: ${{ needs.deploy.outputs.image_tag }}"
          gh release upload ${{ needs.deploy.outputs.image_tag }} path/to/your/asset.zip
