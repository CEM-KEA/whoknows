name: Pull Request Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  check_branch_status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Check if Branch is Behind Base Branch
        id: check_branch
        run: |
          git fetch origin main
          BEHIND_COMMITS=$(git rev-list --count HEAD..origin/main)
          echo "Commits behind main: $BEHIND_COMMITS"
          if [ "$BEHIND_COMMITS" -gt 0 ]; then
            echo "Branch is behind main. Setting merge_required=true."
            echo "merge_required=true" >> $GITHUB_ENV
          else
            echo "Branch is up-to-date with main. No merge needed."
            echo "merge_required=false" >> $GITHUB_ENV
          fi

      - name: Check for Merge Conflicts
        run: |
          git fetch origin main
          if ! git merge --no-commit --no-ff origin/main; then
            echo "Merge conflict detected! Please resolve conflicts before proceeding."
            exit 1
          fi

      - name: Merge Base Branch if Required
        env:
          merge_required: ${{ env.merge_required }}
        if: ${{ env.merge_required == 'true' }}
        run: |
          git merge origin/main


  build_and_test:
    runs-on: ubuntu-latest
    needs: check_branch_status

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Run Backend Tests
        run: |
          cd backend
          go test ./...

      # Create volume manually
      - name: Create PostgreSQL Data Volume
        run: docker volume create postgres_data

      # Run PostgreSQL container separately to seed data
      - name: Start PostgreSQL Container Manually
        run: |
          docker run -d --name db_temp \
            -e POSTGRES_DB=${{ secrets.API_DATABASE_NAME }} \
            -e POSTGRES_USER=${{ secrets.API_DATABASE_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.API_DATABASE_PASSWORD }} \
            -v postgres_data:/var/lib/postgresql/data \
            -p 5432:5432 postgres:15-alpine

      # Wait for the PostgreSQL container to be ready
      - name: Wait for PostgreSQL to be Ready
        run: |
          MAX_RETRIES=10
          RETRY_INTERVAL=5
          retries=0

          until docker exec db_temp pg_isready -U ${{ secrets.API_DATABASE_USER }}; do
            retries=$((retries+1))
            if [ "$retries" -ge "$MAX_RETRIES" ]; then
              echo "PostgreSQL did not become ready within the timeout. Exiting."
              exit 1
            fi
            echo "Waiting for PostgreSQL to be ready... (Attempt: $retries/$MAX_RETRIES)"
            sleep $RETRY_INTERVAL
          done

          echo "PostgreSQL is ready!"

      # Copy the testdata.sql file into the PostgreSQL container
      - name: Copy testdata.sql to PostgreSQL Container
        run: |
          docker cp ./backend/test/testdata.sql db_temp:/tmp/testdata.sql

      # Run the SQL script inside the PostgreSQL container to seed the test data
      - name: Seed Test Data into PostgreSQL
        run: |
          docker exec db_temp psql -U ${{ secrets.API_DATABASE_USER }} -d ${{ secrets.API_DATABASE_NAME }} -f /tmp/testdata.sql

      # Stop the temporary PostgreSQL container
      - name: Stop and Remove Temporary PostgreSQL Container
        run: |
          docker stop db_temp
          docker rm db_temp

      - name: Set environment variables for Docker Compose
        run: |
            echo "API_JWT_SECRET=${{ secrets.API_JWT_SECRET }}" > .env
            echo "API_WEATHER_API_KEY=${{ secrets.API_WEATHER_API_KEY }}" >> .env

      - name: Start Docker Compose 
        run: |
            docker compose --env-file .env -f compose.test.yml up --build -d
      
      - name: Show Backend Logs
        run: docker logs backend

      - name: Show Frontend Logs
        run: docker logs frontend

      - name: Show Database Logs
        run: docker logs db

      # Wait for the Backend to be Ready
      - name: Wait for Backend to be Ready
        run: |
          MAX_RETRIES=30
          RETRY_INTERVAL=10
          retries=0

          until curl -s http://localhost:8080 > /dev/null; do
            retries=$((retries+1))
            if [ "$retries" -ge "$MAX_RETRIES" ]; then
              echo "Backend did not become ready within the timeout. Exiting."
              exit 1
            fi
            echo "Waiting for backend to be ready... (Attempt: $retries/$MAX_RETRIES)"
            sleep $RETRY_INTERVAL
          done

          echo "Backend is ready!"

      - name: Wait for Frontend to be Ready
        run: |
          MAX_RETRIES=30
          RETRY_INTERVAL=10
          retries=0

          until curl -s http://localhost:80 > /dev/null; do
            retries=$((retries+1))
            if [ "$retries" -ge "$MAX_RETRIES" ]; then
              echo "Frontend did not become ready within the timeout. Exiting."
              exit 1
            fi
            echo "Waiting for frontend (nginx) to be ready... (Attempt: $retries/$MAX_RETRIES)"
            sleep $RETRY_INTERVAL
          done

          echo "Frontend is ready!"

      - name: Install Dependencies for Playwright
        run: npx playwright install-deps

      - name: Install Playwright
        run: |
          cd frontend
          npm install @playwright/test
          npx playwright install

      - name: Run End-to-End Tests
        env:
          TEST_FRONTEND_URL: http://localhost
          TEST_LOGIN_USERNAME: ${{ secrets.TEST_LOGIN_USERNAME }}
          TEST_LOGIN_PASSWORD: ${{ secrets.TEST_LOGIN_PASSWORD }}
        run: |
          cd frontend
          npx playwright test

      - name: Stop Docker Compose
        run: docker compose -f compose.test.yml down
