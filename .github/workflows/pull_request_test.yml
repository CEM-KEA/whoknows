name: Pull Request Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  check_branch_status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Check if Branch is Behind Base Branch
        id: check_branch
        run: |
          git fetch origin main
          BEHIND_COMMITS=$(git rev-list --count HEAD..origin/main)
          echo "Commits behind main: $BEHIND_COMMITS"
          if [ "$BEHIND_COMMITS" -gt 0 ]; then
            echo "Branch is behind main. Setting merge_required=true."
            echo "merge_required=true" >> $GITHUB_ENV
          else
            echo "Branch is up-to-date with main. No merge needed."
            echo "merge_required=false" >> $GITHUB_ENV
          fi

      - name: Check for Merge Conflicts
        run: |
          git fetch origin main
          if ! git merge --no-commit --no-ff origin/main; then
            echo "Merge conflict detected! Please resolve conflicts before proceeding."
            exit 1
          fi

      - name: Merge Base Branch if Required
        env:
          merge_required: ${{ env.merge_required }}
        if: ${{ env.merge_required == 'true' }}
        run: |
          git merge origin/main


  build_and_test:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Check Docker Version
        run: docker --version

      - name: Install Latest Docker, Docker CLI, and Containerd
        run: |
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/trusted.gpg.d/docker.asc
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          
      - name: Check Updated Docker Version
        run: docker --version

      - name: Check Docker Compose Version
        run: docker compose version

      - name: SonarQube Scan Monorepo
        uses: sonarsource/sonarcloud-github-action@v3
        with:
          args: |
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.token=${{ env.SONAR_TOKEN }}
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
            -Dsonar.sources=./backend,./frontend,./legacy,./compose.yml
            -Dsonar.exclusions=**/node_modules/**,**/test/**,**/legacy/**

      - name: Run Backend Tests
        run: |
          cd backend
          go test ./...

      - name: Set environment variables for Docker Compose
        run: |
          export API_SERVER_PORT=${{ secrets.API_SERVER_PORT }}
          export API_DATABASE_HOST=${{ secrets.API_DATABASE_HOST }}
          export API_DATABASE_PORT=${{ secrets.API_DATABASE_PORT }}
          export API_DATABASE_USER=${{ secrets.API_DATABASE_USER }}
          export API_DATABASE_PASSWORD=${{ secrets.API_DATABASE_PASSWORD }}
          export API_DATABASE_NAME=${{ secrets.API_DATABASE_NAME }}
          export API_DATABASE_SSL_MODE=${{ secrets.API_DATABASE_SSL_MODE }}
          export API_DATABASE_MIGRATE=${{ secrets.API_DATABASE_MIGRATE }}
          export API_JWT_SECRET=${{ secrets.API_JWT_SECRET }}
          export API_JWT_EXPIRATION=${{ secrets.API_JWT_EXPIRATION }}
          export API_APP_ENVIRONMENT=${{ secrets.API_APP_ENVIRONMENT }}
          export API_PAGINATION_LIMIT=${{ secrets.API_PAGINATION_LIMIT }}
          export API_PAGINATION_OFFSET=${{ secrets.API_PAGINATION_OFFSET }}
          export API_LOG_LEVEL=${{ secrets.API_LOG_LEVEL }}
          export API_LOG_FORMAT=${{ secrets.API_LOG_FORMAT }}
          export VITE_API_URL=${{ secrets.VITE_API_URL }}
          export API_WEATHER_API_KEY=${{ secrets.API_WEATHER_API_KEY }}
          export IMAGE_TAG=${{ env.IMAGE_TAG }}

      - name: Start Docker Compose 
        run: |
          docker compose --profile development up --build -d 

      - name: Wait for Frontend to be Ready
        run: |
          MAX_RETRIES=30
          RETRY_INTERVAL=10
          retries=0

          until curl -s http://localhost:80 > /dev/null; do
            retries=$((retries+1))
            if [ "$retries" -ge "$MAX_RETRIES" ]; then
              echo "Frontend did not become ready within the timeout. Exiting."
              exit 1
            fi
            echo "Waiting for frontend (nginx) to be ready... (Attempt: $retries/$MAX_RETRIES)"
            sleep $RETRY_INTERVAL
          done

          echo "Frontend is ready!"

      - name: Install Dependencies for Playwright
        run: npx playwright install-deps

      - name: Install Playwright
        run: |
          cd frontend
          npm install @playwright/test
          npx playwright install

      - name: Run End-to-End Tests
        env:
          TEST_FRONTEND_URL: http://localhost
          TEST_LOGIN_USERNAME: ${{ secrets.TEST_LOGIN_USERNAME }}
          TEST_LOGIN_PASSWORD: ${{ secrets.TEST_LOGIN_PASSWORD }}
        run: |
          cd frontend
          npx playwright test
