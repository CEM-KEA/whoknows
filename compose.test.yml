services:
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    environment:
      - API_DATABASE_HOST=db
      - API_DATABASE_PORT=5432
      - API_DATABASE_USER=${API_DATABASE_USER}
      - API_DATABASE_PASSWORD=${API_DATABASE_PASSWORD}
      - API_DATABASE_NAME=${API_DATABASE_NAME}
      - API_DATABASE_SSL_MODE=${API_DATABASE_SSL_MODE}
      - API_DATABASE_MIGRATE=${API_DATABASE_MIGRATE}
      - API_SERVER_PORT=8080
      - API_JWT_SECRET=${API_JWT_SECRET}
      - API_JWT_EXPIRATION=${API_JWT_EXPIRATION}
      - API_ENVIRONMENT=test
      - API_PAGINATION_LIMIT=${API_PAGINATION_LIMIT}
      - API_PAGINATION_OFFSET=${API_PAGINATION_OFFSET}
      - API_LOG_LEVEL=${API_LOG_LEVEL}
      - API_LOG_FORMAT=${API_LOG_FORMAT}
      - API_WEATHER_API_KEY=${API_WEATHER_API_KEY}
    ports:
      - "8080:8080"
    depends_on:
      - db

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
    environment:
      - VITE_API_URL=http://localhost:8080
    ports:
      - "80:80"
    depends_on:
      - backend

  db:
    container_name: db
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${API_DATABASE_NAME}
      - POSTGRES_USER=${API_DATABASE_USER}
      - POSTGRES_PASSWORD=${API_DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: